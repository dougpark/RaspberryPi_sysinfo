#!/usr/bin/python3

import getopt
import subprocess
import sys
import platform
import os
# import curses

yellow = "\x1b[33;20m"
reset = "\x1b[0m"

print(yellow+ "*** sysinfo ***"+reset)
print("A self sufficient script to display info about this Raspberry Pi")
print("October 2022\n")

def update():
    print("Updating...")
    # Install Everything
    cmd = "wget -q -O - https://raw.githubusercontent.com/dougpark/RaspberryPi_sysinfo/master/install.sh | bash"
    INSTALL = subprocess.check_output(cmd, shell=True).decode("utf-8")
    print(INSTALL)

def info():
    
    # Host Name
    try:
        cmd = "hostname | tr -d \'\\n\'"
        HOST = subprocess.check_output(cmd, shell=True).decode("utf-8")
        print(yellow+"Host: "+reset + HOST)
    except BaseException:
        print("Host: No host info found")

    # IP Address
    try:
        cmd = "hostname -I | cut -d\' \' -f1"
        IP = subprocess.check_output(cmd, shell=True).decode("utf-8").rstrip()
        print(yellow+"IP: "+reset + IP)
    except BaseException:
        print(yellow+"IP: "+reset + "No IP info found")

    # DNS Server
    try:
        cmd = "grep 'nameserver' /etc/resolv.conf | tr '\n' ' '"
        DNS = subprocess.check_output(cmd, shell=True).decode("utf-8").rstrip()
        print(yellow+"DNS: "+reset + DNS)
    except BaseException:
        print(yellow+"DNS: "+reset + "No DNS info found")

    # Raspberry Pi Model
    try:
        cmd = "cat /sys/firmware/devicetree/base/model"
        MODEL = subprocess.check_output(cmd, shell=True).decode("utf-8").rstrip()
        print(yellow+"Pi Model:"+reset+MODEL)
    except BaseException:
        print(yellow+"Pi Model: "+reset + "No Pi Model info found")

    # Running on Raspberry Pi
    try:
        file = "/etc/apt/sources.list.d/raspi.list"
        if (os.path.exists(file)):
            cmd = "cat /etc/apt/sources.list.d/raspi.list | grep rasp | head -n1"
            Rasp = subprocess.check_output(cmd, shell=True).decode("utf-8").rstrip()
            print(yellow+"Raspberry Pi: "+reset + Rasp)
        else:
            print(yellow+"Raspberry Pi: "+reset + "No Raspberry Pi info found")
    except BaseException:
        print(yellow+"Raspberry Pi: "+reset + "No Raspberry Pi info found")

    # Linux machine
    try:
        print(yellow+"OS machine: "+ reset + os.uname().machine)
    except BaseException:
        print(yellow+"OS machine:"+reset +" No OS machine info found")

    # Linux uname
    # try:   
    #     print(yellow+"OS uname: " +reset+ str(os.uname()))
    # except BaseException:
    #     print(yellow+"OS uname:"+reset +" No OS uname info found")

    # Linux platform
    try:
        print(yellow+"Platform: "+reset+ str(platform.platform()))
    except BaseException:
        print(yellow+"Platform:"+reset +" No platform info found")

    # Processor
    try:
        print(yellow+"Processor: "+reset+ str(platform.processor()))
    except BaseException:
        print(yellow+"Processor:"+reset +" No processor info found")

    # Architecture
    try:
        print(yellow+"Architecture: "+reset+ str(platform.architecture()))
    except BaseException:
        print(yellow+"Architecture:"+reset +" No architecture info found")

    # OS Release Info
    try:
        cmd = "cat /etc/os-release | grep PRETTY"
        Release = subprocess.check_output(cmd, shell=True).decode("utf-8").rstrip()
        print(yellow+"Linux Release Info: "+reset + Release)
    except BaseException:
        print(yellow+"Linux Release Info:"+reset +" No release info found")

    # Python Implementation
    try:
        print(yellow+"Python Impl: "+reset+ str(platform.python_implementation()))
    except BaseException:
        print(yellow+"Python Impl:"+reset +" No Python Impl info found")    

    # Python 64bit
    # file -L $(python -c 'import sys; print(sys.executable)')
    # if grep -q PATTERN file.txt; then
    #     echo found
    # else
    #     echo not found
    # fi
        
    try:
        PyB = sys.executable
        cmd = "file -L "+PyB+" | grep -q '64-bit'"
        try:
            PyBit = subprocess.check_output(cmd, shell=True).decode("utf-8").rstrip()
            print(yellow+"Python Kind: "+reset + "64bit")
        except subprocess.CalledProcessError as err:
            print(yellow+"Python Kind: "+reset + "32bit")
        
    except BaseException:
        print(yellow+"Python Kind:"+reset +" No bit info found")

    # Python Version
    try:
        print(yellow+"Python verson: "+reset + str(platform.python_version()))
    except BaseException:
        print(yellow+"Python version:"+reset +" No Python version info found")

    # Last date Apt was Updated
    try:
        cmd = "ls -l /var/cache/apt/pkgcache.bin | cut -d' ' -f6,7,8"
        Apt = subprocess.check_output(cmd, shell=True).decode("utf-8").rstrip()
        print(yellow+"Apt last updated: "+reset + Apt)
    except BaseException:
        print(yellow+"Apt last updated:"+reset +" No Apt info found")

    # Docker version
    try:
        cmd = "docker -v"
        Docker = subprocess.check_output(cmd, shell=True).decode("utf-8").rstrip()
        print(yellow+"Docker: "+reset + Docker)
    except BaseException:
        print(yellow+"Docker:"+reset +" No Docker info found")

    # CPU Load
    try:
        cmd = "top -bn1 | grep load | awk '{printf \"CPU Load: %.2f\", $(NF-2)}'"
        CPU = subprocess.check_output(cmd, shell=True).decode("utf-8")
        print(yellow+"CPU: "+reset + CPU)
    except BaseException:
        print(yellow+"CPU: "+reset +" No CPU info found")

    # Memory Usage
    try:
        cmd = "free -m | awk 'NR==2{printf \"Mem: %s/%s MB  %.2f%%\", $3,$2,$3*100/$2 }'"
        MemUsage = subprocess.check_output(cmd, shell=True).decode("utf-8")
        print(yellow+"Mem: "+reset + MemUsage)
    except BaseException:
        print(yellow+"Mem:"+reset +" No Mem info found")

    # Disk Usage
    try:
        cmd = "df -h | awk '$NF==\"/\"{printf \"Disk: %d/%d GB  %s\", $3,$2,$5}'"
        Disk = subprocess.check_output(cmd, shell=True).decode("utf-8")
        print(yellow+"Disk: "+reset + Disk)
    except BaseException:
        print(yellow+"Disk:"+reset +" No Disk info found")

    # CPU Temperature
    try:
        file = "/sys/class/thermal/thermal_zone0/temp"
        if (os.path.exists(file)):
            cmd = "cat /sys/class/thermal/thermal_zone0/temp |  awk \'{printf \"%.1f C\", $(NF-0) / 1000}\'"  # pylint: disable=line-too-long
            Temp = subprocess.check_output(cmd, shell=True).decode("utf-8")
            print(yellow+"CPU Temp: "+reset + Temp)
        else:
            print(yellow+"CPU Temp: "+reset + "No CPU Temp info found")
    except BaseException:
        print(yellow+"CPU Temp: exception "+ reset +"No CPU Temp info found")

def tips():
    out="""
    Tips

    Copy SSH keys to host
        ssh-copy-id -i ~/.ssh/id_rsa.pub user@remote-host

    Determine Hardware Version
        [Pi Hardware History](https://elinux.org/RPi_HardwareHistory)

    Determine bootloader firmware version
        vcgencmd version
    """
    print(out)

def help():
    out="""
    usage: sysinfo [option]
    Options:
        default        Display useful information about your system
    
        -h,--help      Help
        -u,--update    Update from GitHub
        -t,--tips      Display helpful Linux tips
    
    More Info:
        https://github.com/dougpark/RaspberryPi_sysinfo
    """
    print(out)
    
def main(argv):
   inputfile = ''
   outputfile = ''
   try:
      opts, args = getopt.getopt(argv,"hitu",["help","info","tips","update"])
   except getopt.GetoptError:
      help()
      sys.exit(2)
   for opt, arg in opts:
      if opt in ('-h', "--help"):
         help()
         sys.exit()
      elif opt in ("-u","--update" ):
         update()
         sys.exit()
      elif opt in ("-t", "--tips"):
         tips()
         sys.exit()
   info()

if __name__ == "__main__":
   main(sys.argv[1:])