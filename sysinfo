#!/bin/bash

# Include the python script in this shell script, script ends with "END_SCRIPT"
python - <<'END_SCRIPT'

# Raspberry Pi
# SysInfo
# August 2022

import subprocess
import sys
import platform
import os

yellow = "\x1b[33;20m"
reset = "\x1b[0m"

print(yellow+ "*** sysinfo ***"+reset)
print("A self sufficient script to display current info about this Raspberry Pi")
print("August 2022\n")

# Host Name
try:
    cmd = "hostname | tr -d \'\\n\'"
    HOST = subprocess.check_output(cmd, shell=True).decode("utf-8")
    print(yellow+"Host: "+reset + HOST)
except BaseException:
    print("Host: No host info found")

# IP Address
cmd = "hostname -I | cut -d\' \' -f1"
IP = subprocess.check_output(cmd, shell=True).decode("utf-8")
print(yellow+"IP:"+reset + IP)

# Running on Raspberry Pi
cmd = "cat /etc/apt/sources.list.d/raspi.list | grep rasp | head -n1"
Rasp = subprocess.check_output(cmd, shell=True).decode("utf-8")
print("")
print(yellow+"Raspberry Pi: "+reset + Rasp + "\n")

# Linux Info
try:
    print(yellow+"OS machine: "+ reset + os.uname().machine)
except BaseException:
    print(yellow+"OS machine:"+reset +" No OS machine info found")
    
print(yellow+"OS: " +reset+ str(os.uname()))
print(yellow+"platform: "+reset+ str(platform.platform()))
print(yellow+"Processor: "+reset+ str(platform.processor()))
print(yellow+"Architecture: "+reset+ str(platform.architecture()))

# OS Release Info
cmd = "cat /etc/os-release"
Release = subprocess.check_output(cmd, shell=True).decode("utf-8")
print(yellow+"Linux Release Info:\n"+reset + Release)

# Python Implementation
print(yellow+"Python Impl: "+reset+ str(platform.python_implementation()))

# Python Version
print(yellow+"Python verson: "+reset + str(platform.python_version()))

# Last date Apt was Updated
cmd = "ls -l /var/cache/apt/pkgcache.bin | cut -d' ' -f6,7,8"
Apt = subprocess.check_output(cmd, shell=True).decode("utf-8")
print(yellow+"Apt last updated: "+reset + Apt)

# Docker version
cmd = "docker -v"
Docker = subprocess.check_output(cmd, shell=True).decode("utf-8")
print(yellow+"Docker: "+reset + Docker)

# CPU Load
cmd = "top -bn1 | grep load | awk '{printf \"CPU Load: %.2f\", $(NF-2)}'"
CPU = subprocess.check_output(cmd, shell=True).decode("utf-8")
print(yellow+"CPU: "+reset + CPU)

# Memory Usage
cmd = "free -m | awk 'NR==2{printf \"Mem: %s/%s MB  %.2f%%\", $3,$2,$3*100/$2 }'"
MemUsage = subprocess.check_output(cmd, shell=True).decode("utf-8")
print(yellow+"Mem: "+reset + MemUsage)

# Disk Usage
cmd = "df -h | awk '$NF==\"/\"{printf \"Disk: %d/%d GB  %s\", $3,$2,$5}'"
Disk = subprocess.check_output(cmd, shell=True).decode("utf-8")
print(yellow+"Disk: "+reset + Disk)

# CPU Temperature
try:
    file = "/sys/class/thermal/thermal_zone0/temp"
    if (os.path.exists(file)):
        cmd = "cat /sys/class/thermal/thermal_zone0/temp |  awk \'{printf \"%.1f C\", $(NF-0) / 1000}\'"  # pylint: disable=line-too-long
        Temp = subprocess.check_output(cmd, shell=True).decode("utf-8")
        print(yellow+"CPU Temp: "+reset + Temp)
    else:
        print(yellow+"CPU Temp: "+reset + "Not found")
except BaseException:
    print(yellow+"CPU Temp: exception "+ reset +"Not found")

# End of python script in this bash file
END_SCRIPT
